name: Validate PR on develop branch
on: 
     # The workflow will run whenever an event happens on a pull request
    pull_request:
        branches:
            - dev
        types: [opened, synchronize]
        ##paths:
          ##  - 'NEWP/force-app/**'

jobs: 

  validate-deployment-on-dev-org:
    runs-on: ubuntu-latest
    steps:
      # Checkout the Source code from the latest commit
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
        # Now, we need a way to let the developer specify which tests to run, which
        # could be all tests or just the tests relevant to their deployment.

        # To do this, we can ask the developer to name their test classes in the
        # body of the PR, using the following syntax

        # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
        # or Apex::[all]::Apex to run all tests

        # This special delimeter can be added to the PR template so that your 
        # team doesn't have to remember the syntax. 

        # Once a developer has specified a list of classes to run, we need to be able
        # to extract this information from the PR, and pass it on the the VM.
      
        
      ##- name: Read PR Body
        ##env:
            ##PR_BODY: ${{github.event.pull_request.body}}
        ##run: |
            ##echo $PR_BODY > ./pr_body.txt
            ##node ./parsePR.js              
            ##TESTS=$(cat testsToRun.txt)       
            ##echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
          
      # Download Salesforce CLI
      - name: Download Salesforce CLI
        run: |
          wget -qO sfdx.tar.xz https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir sfdx
          tar xJf sfdx.tar.xz -C sfdx --strip-components 1
          sudo mv sfdx /usr/local/lib/
          sudo ln -s /usr/local/lib/sfdx/bin/sfdx /usr/local/bin/sfdx
        
      # Ensure sfdx is added to PATH
      - name: Add Salesforce CLI to PATH
        run: echo 'export PATH=$PATH:/usr/local/bin/sfdx/bin' >> $HOME/.bashrc && source $HOME/.bashrc
            
      # Installing the git delta plugin
      - name: Install the sfdx-git-delta plugin
        run: echo 'y' | sfdx plugins:install sfdx-git-delta

      # Install SFDX scanner
      - name: Installing SFDX scanner
        run: echo 'y' | sfdx plugins:install @salesforce/sfdx-scanner
      
      
        # Create server key file
      - name: Create server key file
        run: |
          touch server.key
          echo -e "${{ secrets.SF_CICD_SERVERKEY_DEV }}" >> server_dev.key  
        
  
      
      # Authorization with DevHub
      - name: Authorize DevHub
        run:  sfdx force:auth:jwt:grant --clientid "${{ secrets.SF_CLIENT_ID_DEV }}" --username "${{ secrets.SF_CICD_USERNAME_DEV }}" --jwtkeyfile server_dev.key --set-default --alias HubOrg --instanceurl https://login.salesforce.com
        # Authorization with DevHub

      # Generation of package.xml
      - name: Generate the package.xml for delta files
        run:  |
          mkdir changed-sources
          sfdx sgd source delta --to "HEAD" --from "origin/dev" --output "changed-sources/" --ignore-whitespace -d -i .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml
      
      #The output of the scan is stored in a file called apexScanResults.sarif
      # The .sarif file can later be uploaded to github, so that we can see the 
      # results of the scan directly from the PR.
      - name: 'Scan code'
        run: |
            cd changed-sources
            sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'
      
      # Now we upload the .sarif file as explained in the previous step
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
            sarif_file: changed-sources/apexScanResults.sarif


        # Run apex class 
      - name: Apex test class
        run: sfdx force:apex:test:run -l RunLocalTests -r human --wait 10 --targetusername HubOrg
      
      # Validate Deploy changes
      - name: Validate Deployed changes
        run: sfdx force:source:deploy -p NEWP/force-app/main/default -u ${{ secrets.SF_CICD_USERNAME_DEV }} --json --checkonly
        
